import java.util.regex.Pattern;
import java.util.regex.Matcher;

// Apply the java plugin to add support for Java
apply plugin: 'java'
// Plugin to set main class in jar-file
apply plugin: 'application'

// plugins for generating IDE projects
apply plugin: 'eclipse'
apply plugin: 'idea'

String genDir = "$projectDir/src-generated"



application {
    mainClassName = "main.MiniJavaCompiler"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir genDir
        }
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // java cup parser generator
    compileOnly 'com.github.peterzeller:javacup:11c'

    // jflex scanner generator
    compileOnly 'de.jflex:jflex:1.6.1'

    // tool for generating AST-classes
    compileOnly 'com.github.peterzeller:abstractsyntaxgen:0.3.1'


    // java cup runtime library
    compile 'com.github.vbmacher:java-cup-runtime:11b'


    // JUnit for testing
    testCompile 'junit:junit:4.12'

    // Google guava
    compile 'com.google.guava:guava:21.0'

    // Functional Java (immutable datatypes)
    compile group: 'org.functionaljava', name: 'functionaljava', version: '4.8.1'

    // Language server protocol support for Visual Studio Code
    compile group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.6.0'
}


task genJflex {
    description = 'Compile jflex specifications'
    fileTree(dir: 'src/main/java', include:'**/*.flex').each { file ->

        Pattern PACKAGE_PATTERN = Pattern.compile("package\\s+(\\S+)\\s*;");
        Pattern CLASS_PATTERN = Pattern.compile("%class\\s+(\\S+)");
        String fileContents = file.text

        Matcher matcher = PACKAGE_PATTERN.matcher(fileContents);
        String packageName = "";
        if (matcher.find()) {
            packageName = matcher.group(1);
        }

        matcher = CLASS_PATTERN.matcher(fileContents);
        String className = "Yylex";
        if (matcher.find()) {
            className = matcher.group(1);
        }

        String targetDir = "$genDir/" + packageName.replace(".", "/")
        String output = "$targetDir/" + className + ".java"

        inputs.file(file)
        outputs.file(output)

        doLast {
            javaexec {
                classpath configurations.compileOnly
                main = "jflex.Main"
                args = [file, "-d", "$targetDir/"]
            }
        }
    }
}


task genCup {
    description = 'Compile java cup specifications'
    fileTree(dir: 'src/main/java', include:'**/*.cup').each { file ->

        Pattern PACKAGE_PATTERN = Pattern.compile("package\\s+(\\S+)\\s*;");
        Pattern CLASS_PATTERN = Pattern.compile("class\\s+(\\S+)\\s*;");
        String fileContents = file.text

        Matcher matcher = PACKAGE_PATTERN.matcher(fileContents);
        String packageName = "";
        if (matcher.find()) {
            packageName = matcher.group(1);
        }

        matcher = CLASS_PATTERN.matcher(fileContents);
        String className = "parser";
        String symName = "sym"
        if (matcher.find()) {
            className = matcher.group(1);
            symName = className + "Sym";
        }

        String targetDir = "$genDir/" + packageName.replace(".", "/")

        inputs.file(file)
        outputs.file("$targetDir/" + className + ".java")
        outputs.file("$targetDir/" + symName + ".java")

        doLast {
            new File(targetDir).mkdirs()
            javaexec {
                classpath configurations.compileOnly
                main = "java_cup.Main"
        args = ["-dump", "-nonterms", "-destdir", targetDir, file]
            }
        }
    }
}

task genAst {
    description = 'Compile ast specifications'
    fileTree(dir: 'src/main/java', include:'**/*.ast').each { file ->

        Pattern PACKAGE_PATTERN = Pattern.compile("package\\s+(\\S+)\\s*;");
        String fileContents = file.text

        Matcher matcher = PACKAGE_PATTERN.matcher(fileContents);
        String packageName = "";
        if (matcher.find()) {
            packageName = matcher.group(1);
        }

        String targetDir = "$genDir/" + packageName.replace(".", "/")

        inputs.file(file)
        outputs.dir(targetDir)

        doLast {
            javaexec {
                classpath configurations.compileOnly
                main = "asg.Main"
                args = [file, targetDir]
            }
        }
    }
}



task gen {
    description "Generates code from various input files"
}
gen.dependsOn genJflex
gen.dependsOn genCup
gen.dependsOn genAst

compileJava.dependsOn gen

// delete the generated sources on clean
clean.doFirst {
    delete genDir
}

// Add jar attributes:
jar {
    manifest {
        attributes(
                'Main-Class': 'main.MiniJavaCompiler',
                "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}